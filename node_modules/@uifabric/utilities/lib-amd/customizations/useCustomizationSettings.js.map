{"version":3,"file":"useCustomizationSettings.js","sourceRoot":"../src/","sources":["customizations/useCustomizationSettings.ts"],"names":[],"mappings":";;;IAGA;;OAEG;IACH,SAAgB,wBAAwB,CACtC,UAAoB,EACpB,SAAkB,EAClB,aAA+B;QAEzB,IAAA,sGAA0G,EAAzG,gBAAQ,EAAE,mBAA+F,CAAC;QAEjH,IAAM,qBAAqB,GAAG,KAAK,CAAC,WAAW,CAAC;YAC9C,IAAM,cAAc,GAAG,+BAAc,CAAC,WAAW,CAAC,UAAU,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;YACxF,WAAW,CAAC,cAAc,CAAC,CAAC;QAC9B,CAAC,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC,CAAC;QAE3C,KAAK,CAAC,SAAS,CAAC;YACd,+BAAc,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;YAE9C,OAAO,cAAM,OAAA,+BAAc,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAA/C,CAA+C,CAAC;QAC/D,CAAC,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC;QAE5B,OAAO,QAAQ,CAAC;IAClB,CAAC;IAnBD,4DAmBC","sourcesContent":["import * as React from 'react';\nimport { ISettings, Customizations, ICustomizations } from './Customizations';\n\n/**\n * Hook to get Customizations settings. It will trigger component state update on settings change observed.\n */\nexport function useCustomizationSettings(\n  properties: string[],\n  scopeName?: string,\n  localSettings?: ICustomizations,\n): ISettings {\n  const [settings, setSettings] = React.useState(Customizations.getSettings(properties, scopeName, localSettings));\n\n  const onCustomizationChange = React.useCallback(() => {\n    const globalSettings = Customizations.getSettings(properties, scopeName, localSettings);\n    setSettings(globalSettings);\n  }, [properties, scopeName, localSettings]);\n\n  React.useEffect(() => {\n    Customizations.observe(onCustomizationChange);\n\n    return () => Customizations.unobserve(onCustomizationChange);\n  }, [onCustomizationChange]);\n\n  return settings;\n}\n"]}