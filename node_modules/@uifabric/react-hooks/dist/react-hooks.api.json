{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.7.1",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@uifabric/react-hooks!",
  "docComment": "",
  "name": "@uifabric/react-hooks",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@uifabric/react-hooks!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@uifabric/react-hooks!ChangeCallback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChangeCallback<TElement extends "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", TValue> = "
            },
            {
              "kind": "Content",
              "text": "(ev: "
            },
            {
              "kind": "Reference",
              "text": "React.FormEvent",
              "canonicalReference": "@types/react!~React.FormEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<TElement> | undefined, newValue: TValue | undefined) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeCallback",
          "typeParameters": [
            {
              "typeParameterName": "TElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TValue",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@uifabric/react-hooks!IUseBooleanCallbacks:interface",
          "docComment": "/**\n * Updater callbacks returned by `useBoolean`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IUseBooleanCallbacks "
            }
          ],
          "releaseTag": "Public",
          "name": "IUseBooleanCallbacks",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@uifabric/react-hooks!IUseBooleanCallbacks#setFalse:member",
              "docComment": "/**\n * Set the value to false. Always has the same identity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setFalse: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setFalse",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@uifabric/react-hooks!IUseBooleanCallbacks#setTrue:member",
              "docComment": "/**\n * Set the value to true. Always has the same identity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTrue: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setTrue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@uifabric/react-hooks!IUseBooleanCallbacks#toggle:member",
              "docComment": "/**\n * Toggle the value. Always has the same identity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toggle: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "toggle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@uifabric/react-hooks!useAsync:function(1)",
          "docComment": "/**\n * Hook to provide an Async instance that is automatically cleaned up on dismount.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useAsync(): "
            },
            {
              "kind": "Reference",
              "text": "Async",
              "canonicalReference": "@uifabric/utilities!Async:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "useAsync"
        },
        {
          "kind": "Function",
          "canonicalReference": "@uifabric/react-hooks!useBoolean:function(1)",
          "docComment": "/**\n * Hook to store a value and generate callbacks for setting the value to true or false. The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n *\n * @returns Array with the current value and an object containing the updater callbacks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useBoolean(initialState: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "[boolean, "
            },
            {
              "kind": "Reference",
              "text": "IUseBooleanCallbacks",
              "canonicalReference": "@uifabric/react-hooks!IUseBooleanCallbacks:interface"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "initialState",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "useBoolean"
        },
        {
          "kind": "Function",
          "canonicalReference": "@uifabric/react-hooks!useConst:function(1)",
          "docComment": "/**\n * Hook to initialize and return a constant value. Unlike `React.useMemo`, this is guaranteed to always return the same value (and if the initializer is a function, only call it once). This is similar to setting a private member in a class constructor.\n *\n * If the value should ever change based on dependencies, use `React.useMemo` instead.\n *\n * If the value itself is a function, consider using `useConstCallback` instead.\n *\n * @param initialValue - Initial value, or function to get the initial value. Similar to `useState`, only the value/function passed in the first time this is called is respected.\n *\n * @returns The value. The identity of this value will always be the same.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useConst<T>(initialValue: "
            },
            {
              "kind": "Content",
              "text": "T | (() => T)"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "initialValue",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useConst"
        },
        {
          "kind": "Function",
          "canonicalReference": "@uifabric/react-hooks!useConstCallback:function(1)",
          "docComment": "/**\n * Hook to ensure a callback function always has the same identity. Unlike `React.useCallback`, this is guaranteed to always return the same value.\n *\n * If the callback should ever change based on dependencies, use `React.useCallback` instead.\n *\n * @param callback - The callback. Only the first value passed is respected.\n *\n * @returns The callback. The identity of this callback will always be the same.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useConstCallback<T extends "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => any"
            },
            {
              "kind": "Content",
              "text": ">(callback: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useConstCallback"
        },
        {
          "kind": "Function",
          "canonicalReference": "@uifabric/react-hooks!useControllableValue:function(1)",
          "docComment": "/**\n * Hook to manage a value that could be either controlled or uncontrolled, such as a checked state or text box string.\n *\n * @param controlledValue - The controlled value passed in the props. This value will always be used if provided, and the internal state will be updated to reflect it.\n *\n * @param defaultUncontrolledValue - Initial value for the internal state in the uncontrolled case.  @see https://reactjs.org/docs/uncontrolled-components.html\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useControllableValue<TValue, TElement extends "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">(controlledValue: "
            },
            {
              "kind": "Content",
              "text": "TValue | undefined"
            },
            {
              "kind": "Content",
              "text": ", defaultUncontrolledValue: "
            },
            {
              "kind": "Content",
              "text": "TValue | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<[TValue | undefined, (newValue: TValue | undefined) => void]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "controlledValue",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "defaultUncontrolledValue",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TValue",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useControllableValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "@uifabric/react-hooks!useControllableValue:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useControllableValue<TValue, TElement extends "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", TCallback extends "
            },
            {
              "kind": "Reference",
              "text": "ChangeCallback",
              "canonicalReference": "@uifabric/react-hooks!ChangeCallback:type"
            },
            {
              "kind": "Content",
              "text": "<TElement, TValue> | undefined"
            },
            {
              "kind": "Content",
              "text": ">(controlledValue: "
            },
            {
              "kind": "Content",
              "text": "TValue | undefined"
            },
            {
              "kind": "Content",
              "text": ", defaultUncontrolledValue: "
            },
            {
              "kind": "Content",
              "text": "TValue | undefined"
            },
            {
              "kind": "Content",
              "text": ", onChange: "
            },
            {
              "kind": "Content",
              "text": "TCallback"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<[TValue | undefined, (newValue: TValue | undefined, ev?: "
            },
            {
              "kind": "Reference",
              "text": "React.FormEvent",
              "canonicalReference": "@types/react!~React.FormEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<TElement>) => void]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "controlledValue",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            },
            {
              "parameterName": "defaultUncontrolledValue",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "onChange",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TValue",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TCallback",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useControllableValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "@uifabric/react-hooks!useForceUpdate:function(1)",
          "docComment": "/**\n * Hook to force update a function component by updating a dummy state.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useForceUpdate(): "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "useForceUpdate"
        },
        {
          "kind": "Function",
          "canonicalReference": "@uifabric/react-hooks!useId:function(1)",
          "docComment": "/**\n * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).\n *\n * @param prefix - Optional prefix for the ID\n *\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present, without conditioning the hook call\n *\n * @returns The ID\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useId(prefix?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", providedId?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "prefix",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "providedId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "useId"
        },
        {
          "kind": "Function",
          "canonicalReference": "@uifabric/react-hooks!useMergedRefs:function(1)",
          "docComment": "/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that updates all provided refs\n *\n * @param refs - Refs to collectively update with one ref value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useMergedRefs<T>(...refs: "
            },
            {
              "kind": "Reference",
              "text": "React.Ref",
              "canonicalReference": "@types/react!~React.Ref:type"
            },
            {
              "kind": "Content",
              "text": "<T>[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(instance: T) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "refs",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useMergedRefs"
        },
        {
          "kind": "Function",
          "canonicalReference": "@uifabric/react-hooks!useOnEvent:function(1)",
          "docComment": "/**\n * Hook to attach an event handler on mount and handle cleanup.\n *\n * @param element - Element (or ref to an element) to attach the event handler to\n *\n * @param eventName - The event to attach a handler for\n *\n * @param callback - The handler for the event\n *\n * @param useCapture - Whether or not to attach the handler for the capture phase\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useOnEvent<TElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", TEvent extends "
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "!Event:interface"
            },
            {
              "kind": "Content",
              "text": ">(element: "
            },
            {
              "kind": "Reference",
              "text": "React.RefObject",
              "canonicalReference": "@types/react!~React.RefObject:interface"
            },
            {
              "kind": "Content",
              "text": "<TElement | undefined | null> | TElement | "
            },
            {
              "kind": "Reference",
              "text": "Window",
              "canonicalReference": "!Window:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined | null"
            },
            {
              "kind": "Content",
              "text": ", eventName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(ev: TEvent) => void"
            },
            {
              "kind": "Content",
              "text": ", useCapture?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "element",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            },
            {
              "parameterName": "eventName",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              }
            },
            {
              "parameterName": "useCapture",
              "parameterTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TEvent",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useOnEvent"
        }
      ]
    }
  ]
}
