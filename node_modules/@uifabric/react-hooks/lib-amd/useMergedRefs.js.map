{"version":3,"file":"useMergedRefs.js","sourceRoot":"../src/","sources":["useMergedRefs.ts"],"names":[],"mappings":";;;IAEA;;;;OAIG;IACH,SAAgB,aAAa;QAAI,cAAuB;aAAvB,UAAuB,EAAvB,qBAAuB,EAAvB,IAAuB;YAAvB,yBAAuB;;QACtD,OAAO,KAAK,CAAC,WAAW,CAAC,UAAC,KAAQ;YAChC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;gBACd,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;oBAC7B,GAAG,CAAC,KAAK,CAAC,CAAC;iBACZ;qBAAM,IAAI,GAAG,EAAE;oBACd,qDAAqD;oBACnD,GAA6C,CAAC,OAAO,GAAG,KAAK,CAAC;iBACjE;YACH,CAAC,CAAC,CAAC;QACL,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IAXD,sCAWC","sourcesContent":["import * as React from 'react';\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs- Refs to collectively update with one ref value.\n */\nexport function useMergedRefs<T>(...refs: React.Ref<T>[]): (instance: T) => void {\n  return React.useCallback((value: T) => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ((ref as unknown) as React.MutableRefObject<T>).current = value;\n      }\n    });\n  }, refs);\n}\n"]}