{"version":3,"file":"useMergedRefs.js","sourceRoot":"../src/","sources":["useMergedRefs.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B;;;;GAIG;AACH,MAAM,UAAU,aAAa;IAAI,cAAuB;SAAvB,UAAuB,EAAvB,qBAAuB,EAAvB,IAAuB;QAAvB,yBAAuB;;IACtD,OAAO,KAAK,CAAC,WAAW,CAAC,UAAC,KAAQ;QAChC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;YACd,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;gBAC7B,GAAG,CAAC,KAAK,CAAC,CAAC;aACZ;iBAAM,IAAI,GAAG,EAAE;gBACd,qDAAqD;gBACnD,GAA6C,CAAC,OAAO,GAAG,KAAK,CAAC;aACjE;QACH,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,IAAI,CAAC,CAAC;AACX,CAAC","sourcesContent":["import * as React from 'react';\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs- Refs to collectively update with one ref value.\n */\nexport function useMergedRefs<T>(...refs: React.Ref<T>[]): (instance: T) => void {\n  return React.useCallback((value: T) => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ((ref as unknown) as React.MutableRefObject<T>).current = value;\n      }\n    });\n  }, refs);\n}\n"]}