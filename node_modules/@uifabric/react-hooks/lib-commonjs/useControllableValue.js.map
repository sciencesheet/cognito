{"version":3,"file":"useControllableValue.js","sourceRoot":"../src/","sources":["useControllableValue.ts"],"names":[],"mappings":";;AAAA,6BAA+B;AAC/B,uCAAsC;AA4BtC,SAAgB,oBAAoB,CAIlC,eAAmC,EAAE,wBAA4C,EAAE,QAAoB;IACjG,IAAA,6CAAgF,EAA/E,aAAK,EAAE,gBAAwE,CAAC;IACvF,IAAM,YAAY,GAAG,mBAAQ,CAAU,eAAe,KAAK,SAAS,CAAC,CAAC;IAEtE,IAAM,sBAAsB,GAAG,KAAK,CAAC,WAAW,CAC9C,UAAC,QAA4B,EAAE,EAA8B;QAC3D,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,EAAG,EAAE,QAAQ,CAAC,CAAC;SACzB;QACD,IAAI,CAAC,YAAY,EAAE;YACjB,QAAQ,CAAC,QAAQ,CAAC,CAAC;SACpB;IACH,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,EAAE,sBAAsB,CAAU,CAAC;AACnF,CAAC;AArBD,oDAqBC","sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type ChangeCallback<TElement extends HTMLElement, TValue> = (\n  ev: React.FormEvent<TElement> | undefined,\n  newValue: TValue | undefined,\n) => void;\n\n/**\n * Hook to manage a value that could be either controlled or uncontrolled, such as a checked state or\n * text box string.\n * @param controlledValue- The controlled value passed in the props. This value will always be used if provided, and the\n * internal state will be updated to reflect it.\n * @param defaultUncontrolledValue- Initial value for the internal state in the uncontrolled case.\n * @see https://reactjs.org/docs/uncontrolled-components.html\n */\nexport function useControllableValue<TValue, TElement extends HTMLElement>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n): Readonly<[TValue | undefined, (newValue: TValue | undefined) => void]>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TCallback extends ChangeCallback<TElement, TValue> | undefined\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange: TCallback,\n): Readonly<[TValue | undefined, (newValue: TValue | undefined, ev?: React.FormEvent<TElement>) => void]>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TCallback extends ChangeCallback<TElement, TValue> | undefined\n>(controlledValue: TValue | undefined, defaultUncontrolledValue: TValue | undefined, onChange?: TCallback) {\n  const [value, setValue] = React.useState<TValue | undefined>(defaultUncontrolledValue);\n  const isControlled = useConst<boolean>(controlledValue !== undefined);\n\n  const setValueOrCallOnChange = React.useCallback(\n    (newValue: TValue | undefined, ev?: React.FormEvent<TElement>) => {\n      if (onChange) {\n        onChange(ev!, newValue);\n      }\n      if (!isControlled) {\n        setValue(newValue);\n      }\n    },\n    [onChange],\n  );\n\n  return [isControlled ? controlledValue : value, setValueOrCallOnChange] as const;\n}\n"]}