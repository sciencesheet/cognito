{"version":3,"file":"Grid.types.js","sourceRoot":"../src/","sources":["utilities/grid/Grid.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\n\r\nexport interface IGrid {}\r\n\r\nexport interface IGridProps extends React.TableHTMLAttributes<HTMLTableElement> {\r\n  /**\r\n   * Gets the component ref.\r\n   */\r\n  componentRef?: IRefObject<IGrid>;\r\n\r\n  /**\r\n   * Items to display in a grid with the specified number of columns\r\n   */\r\n  items: any[];\r\n\r\n  /**\r\n   * The number of columns\r\n   */\r\n  columnCount: number;\r\n\r\n  /**\r\n   * Custom renderer for the individual items\r\n   */\r\n  onRenderItem: (item: any, index: number) => JSX.Element;\r\n\r\n  /**\r\n   * Whether focus should cycle back to the beginning once the user navigates past the end (and vice versa).\r\n   * Only relevant if `doNotContainWithinFocusZone` is not true.\r\n   */\r\n  shouldFocusCircularNavigate?: boolean;\r\n\r\n  /**\r\n   * If false (the default), the grid is contained inside a FocusZone.\r\n   * If true, a FocusZone is not used.\r\n   * @default false\r\n   */\r\n  doNotContainWithinFocusZone?: boolean;\r\n\r\n  /**\r\n   * Class name for the FocusZone container for the grid.\r\n   * @deprecated Use `styles.focusedContainer` to define styling for the focus zone container\r\n   */\r\n  containerClassName?: string;\r\n\r\n  /**\r\n   * Handler for when focus leaves the grid.\r\n   */\r\n  onBlur?: () => void;\r\n\r\n  /**\r\n   * Position this grid is in the parent set (index in a parent menu, for example)\r\n   */\r\n  ariaPosInSet?: number;\r\n\r\n  /**\r\n   * @deprecated Use `ariaPosInSet`\r\n   */\r\n  positionInSet?: number;\r\n\r\n  /**\r\n   * Size of the parent set (size of parent menu, for example)\r\n   */\r\n  ariaSetSize?: number;\r\n\r\n  /**\r\n   * @deprecated Use `ariaSetSize`\r\n   */\r\n  setSize?: number;\r\n\r\n  /**\r\n   * Theme to apply to the component.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Optional styles for the component.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IGridStyleProps, IGridStyles>;\r\n}\r\n\r\n/**\r\n * Properties required to build the styles for the grid component.\r\n */\r\nexport interface IGridStyleProps {\r\n  /**\r\n   * Theme to apply to the grid\r\n   */\r\n  theme: ITheme;\r\n}\r\n\r\n/**\r\n * Styles for the Grid Component.\r\n */\r\nexport interface IGridStyles {\r\n  /**\r\n   * Style for the table container of a grid.\r\n   */\r\n  root: IStyle;\r\n\r\n  /**\r\n   * Style for the table cells of the grid.\r\n   */\r\n  tableCell: IStyle;\r\n\r\n  /**\r\n   * Style for the FocusZone container for the grid.\r\n   */\r\n  focusedContainer?: IStyle;\r\n}\r\n"]}